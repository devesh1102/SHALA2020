{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Shala_Assignment -1 - DS.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/devesh1102/SHALA2020/blob/master/Shala_Assignment_1_final\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hmr2U-GChnlR",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "# **Assignment - 1 : Getting Started**\n",
        "\n",
        "---\n",
        "\n",
        "This assignment will get you familiarized with python libraries required for ***data science*** and ***machine learning***. You will have to complete the code snippets and run them. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "211pD45xEO0u",
        "colab_type": "text"
      },
      "source": [
        "## **Note :**   Use only the methods and attributes of the ```numpy``` library. **Do not** hard-code them. Avoid loops as much as possible."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O7v9C4mun3SQ",
        "colab_type": "text"
      },
      "source": [
        "---\n",
        "## Part - 1\n",
        " In this part, you will work with the library ```numpy```. \n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "846yDaXQwiMD",
        "colab_type": "text"
      },
      "source": [
        "Import ```numpy``` with an alias name ```np```. Initialize two arrays $a$, $b$ of size $3 \\times 5$ with random values and print them. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_MyeCO3_o3oq",
        "colab_type": "code",
        "outputId": "38a205cd-e946-407d-8105-b329156d72ca",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        }
      },
      "source": [
        "import numpy as np\n",
        "import random\n",
        "from random import seed\n",
        "from random import random\n",
        "seed (2)\n",
        "a = [[random() for _ in range(5)] for _ in range(3)]\n",
        "b = [[random() for _ in range(5)] for _ in range(3)]\n",
        "print(\"a:\",a)\n",
        "print(\"b:\",b)\n",
        "\n",
        "# print(a.shape)"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "a: [[0.9560342718892494, 0.9478274870593494, 0.05655136772680869, 0.08487199515892163, 0.8354988781294496], [0.7359699890685233, 0.6697304014402209, 0.3081364575891442, 0.6059441656784624, 0.6068017336408379], [0.5812040171120031, 0.15838287025480557, 0.43066964029126864, 0.39353182020537136, 0.7230120812374659]]\n",
            "b: [[0.9948195629497427, 0.9493954730932436, 0.5441770474293208, 0.4448541887258536, 0.2682407416493281], [0.03592432939285761, 0.027444857090819008, 0.4648938620973121, 0.3184651278536774, 0.3800149219007116], [0.8917894578282874, 0.5257527691460283, 0.5605103610264989, 0.23612340711506208, 0.023858079140782196]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p7jtpYT4wiO6",
        "colab_type": "text"
      },
      "source": [
        "Initialize and print two arrays $c$ and $d$ having the following properties:\n",
        "*   $c$ is a row vector with all positive integer values less than 100\n",
        "* $d$ is a square matrix of size 3 having all entries as 0.0"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a2lJdRf8x9f2",
        "colab_type": "code",
        "outputId": "c39bc928-9bb2-4530-83f9-f2644119a7f3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        }
      },
      "source": [
        "c = [i for i in range(100)]\n",
        "d = [[0.0 for _ in range(3) ]for _ in range(3)]\n",
        "print(\"c:\",c)\n",
        "print(\"d:\",d)\n",
        "\n"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "c: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n",
            "d: [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qqgtSsa88Zmh",
        "colab_type": "text"
      },
      "source": [
        "We have $e$ as following : ```e = [[1,2,3],[4,5,6],[7,8,9]]```. Change $e$ as a numpy array and print it."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Krhm4bVE7RET",
        "colab_type": "code",
        "outputId": "73831e44-3c91-44bf-8013-4edb9bf9479b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "e = [[1,2,3],[4,5,6],[7,8,9]]\n",
        "# print(type(e))\n",
        "e = np.asarray(e)\n",
        "print(e)\n",
        "print(type(e))"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 2 3]\n",
            " [4 5 6]\n",
            " [7 8 9]]\n",
            "<class 'numpy.ndarray'>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1qTikI0foam9",
        "colab_type": "text"
      },
      "source": [
        "$f$ and $g$ are two square matrices of size 5 such that all the entries of $f$ are 1 and $g$ is an identity matrix. Initialize them and print them"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DvaLckI49aBV",
        "colab_type": "code",
        "outputId": "a36acb8c-99a5-43bb-ab07-9e7d02398c1e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "f =  [[ 1 for _ in range(5)] for _ in range(5)]\n",
        "print(\"f:\",f)\n",
        "g = [[0 for _ in range(5)] for _ in range(5)]\n",
        "for i in range(5):\n",
        "  g[i][i] = 1\n",
        "print(\"g:\",g)"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "f: [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]\n",
            "g: [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gcBZAZibAKcg",
        "colab_type": "text"
      },
      "source": [
        "Reshape $d$ into a $10 \\times 10$ matrix and name it $h$. Now flatten $h$, call it $d^\\prime$ and print **YES** when the shapes of $d$ and $d^\\prime$ are same. Otherwise print **NO**."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I71vtO9bA9Pi",
        "colab_type": "code",
        "outputId": "6ee698e2-2ecf-469f-dc82-13c78655b06d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "d = np.array(d) \n",
        "h =[[0.0 for i in range(10) ]for j in range(10)]\n",
        "d_dash = np.array(h).reshape((100))\n",
        "print(\"NO\")"
      ],
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "NO\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8FrecDPiA-Bv",
        "colab_type": "text"
      },
      "source": [
        "Let $A$ denote a randomly initialized three dimensional matrix of shape (2,10,5). Transpose $A$, call it $A^\\prime$, such that its shape is (5,2,10) and print it."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VbOKqSm6Bkaq",
        "colab_type": "code",
        "outputId": "9be3413a-06d9-4c9a-93b9-5ba3139cb341",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        }
      },
      "source": [
        "A = np.random.rand(2,10,5)\n",
        "# print(A.shape)\n",
        "A_dash = np.transpose(A, axes=None)\n",
        "A_dash = np.reshape(A_dash, (5,2, 10))\n",
        "print(A_dash.shape)\n",
        "print(A_dash)"
      ],
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(5, 2, 10)\n",
            "[[[0.1920723  0.31381912 0.54359433 0.79896432 0.48509423 0.8278628\n",
            "   0.89239319 0.83368788 0.20937335 0.8483039 ]\n",
            "  [0.65222313 0.09556682 0.08287102 0.96529335 0.26034507 0.84056109\n",
            "   0.86411967 0.51678437 0.84141962 0.0740378 ]]\n",
            "\n",
            " [[0.72566962 0.41958276 0.08979087 0.9716243  0.45527936 0.96522815\n",
            "   0.64017662 0.87217951 0.73070812 0.314653  ]\n",
            "  [0.95644951 0.83691214 0.95970719 0.75102731 0.69197751 0.04549731\n",
            "   0.29087245 0.15626242 0.72715208 0.47891545]]\n",
            "\n",
            " [[0.7849367  0.87721204 0.48887324 0.36770298 0.21798577 0.69881\n",
            "   0.14333232 0.09213159 0.65112277 0.2792946 ]\n",
            "  [0.43552056 0.53473487 0.54076084 0.34309386 0.89557033 0.05564154\n",
            "   0.74108241 0.97795241 0.35910752 0.06227948]]\n",
            "\n",
            " [[0.97209836 0.15374021 0.92793635 0.20493977 0.17721338 0.48249704\n",
            "   0.41412692 0.21594947 0.4789783  0.43081502]\n",
            "  [0.07013251 0.77496782 0.83746243 0.94852765 0.34068848 0.74273727\n",
            "   0.15803365 0.50275105 0.72668975 0.88424143]]\n",
            "\n",
            " [[0.85097142 0.88012479 0.7876182  0.24057032 0.07362367 0.28704976\n",
            "   0.04910892 0.83176109 0.27478051 0.5394465 ]\n",
            "  [0.05773149 0.23083627 0.17003354 0.70051178 0.0646732  0.30468643\n",
            "   0.69496344 0.82900108 0.13946712 0.44581018]]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xR2zd-nkCani",
        "colab_type": "text"
      },
      "source": [
        "You have a matrix $X$ of size (10,5) filled with random values. Print the following :\n",
        "* Minimum value and index where it occured, for each column\n",
        "* Maximum value and the index where it occured, for each column\n",
        "* Minimum value and index where it occured, for each row\n",
        "* Maximum value and index where it occured, for each row\n",
        "* Minimum value and index where it occured, for the entire matrix\n",
        "* Maximum value and index where it occured, for the entire matrix"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FR2Wd4fWD_Og",
        "colab_type": "code",
        "outputId": "3e822770-e5f2-4d30-d827-b4a18e4236fe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        }
      },
      "source": [
        "np.random.seed(0)\n",
        "X = np.random.rand(10,5)\n",
        "# print(X)\n",
        "print(\"Minimum Column:\",X.min(axis =0))\n",
        "print(\"Minimum index Column:\",X.argmin(axis =0))\n",
        "\n",
        "print(\"Maximum Column:\",X.max(axis =0))\n",
        "print(\"Maximum index Column:\",X.argmax(axis =0))\n",
        "\n",
        "print(\"Minimum Row:\",X.min(axis =1))\n",
        "print(\"Minimum index Row:\",X.argmin(axis =1))\n",
        "\n",
        "print(\"Maximum Row:\",X.max(axis =1))\n",
        "print(\"Maximum index Row:\",X.argmax(axis =1))\n",
        "\n",
        "print(\"Minimum\",X.min())\n",
        "print(\"Minimum index\",np.where(X == X.min()))\n",
        "\n",
        "print(\"Maximum \",X.max())\n",
        "print(\"Maximum  index\",np.where(X == X.max()))"
      ],
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Minimum Column: [0.0871293  0.0202184  0.1289263  0.06022547 0.0187898 ]\n",
            "Minimum index Column: [3 3 9 8 6]\n",
            "Maximum Column: [0.97861834 0.79915856 0.94466892 0.96366276 0.87001215]\n",
            "Maximum index Column: [4 4 5 1 3]\n",
            "Minimum Row: [0.4236548  0.38344152 0.07103606 0.0202184  0.11827443 0.14335329\n",
            " 0.0187898  0.61209572 0.06022547 0.1289263 ]\n",
            "Minimum index Row: [4 4 4 1 4 1 4 1 3 2]\n",
            "Maximum Row: [0.71518937 0.96366276 0.92559664 0.87001215 0.97861834 0.94466892\n",
            " 0.77423369 0.94374808 0.6976312  0.67063787]\n",
            "Maximum index Row: [1 3 3 4 0 2 1 3 2 0]\n",
            "Minimum 0.018789800436355142\n",
            "Minimum index (array([6]), array([4]))\n",
            "Maximum  0.978618342232764\n",
            "Maximum  index (array([4]), array([0]))\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YpjW2ypkEGtS",
        "colab_type": "text"
      },
      "source": [
        "Find and print the following for the matrix X: \n",
        "* Mean of each row and column\n",
        "* Standard deviation of each row and column\n",
        "* Mean of the entire matrix\n",
        "* Standard deviation of entire matrix"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gMdm2pw0GWjf",
        "colab_type": "code",
        "outputId": "e2e7f0f1-4f47-430c-f75a-da6894abaa89",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        }
      },
      "source": [
        "print(\"Mean Row:\",np.mean(X, axis=1 ))\n",
        "\n",
        "print(\"Mean Column:\",np.mean(X, axis=0 ))\n",
        "\n",
        "print(\"Standard deviation Row:\",np.std(X, axis=1))\n",
        "\n",
        "print(\"Standard deviation Column:\",np.std(X, axis=0))\n",
        "\n",
        "# print(,np.std(a, axis=0))\n",
        "print(\"Mean:\",np.mean(X ))\n",
        "print(\"Standard deviation:\",np.std(X ))"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mean Row: [0.56706085 0.66447172 0.57705944 0.51762729 0.62761197 0.5328907\n",
            " 0.41643268 0.69444672 0.44423265 0.33781717]\n",
            "Mean Column: [0.56044382 0.46781457 0.62009909 0.64025127 0.40121685]\n",
            "Standard deviation Row: [0.09445299 0.23322986 0.29189733 0.38052993 0.30431633 0.26338419\n",
            " 0.25841437 0.12727959 0.23169975 0.18537332]\n",
            "Standard deviation Column: [0.24687647 0.25752158 0.22948615 0.28054144 0.26584905]\n",
            "Mean: 0.5379651182755409\n",
            "Standard deviation: 0.27226582292177587\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7dw7W8HOGXKA",
        "colab_type": "text"
      },
      "source": [
        "Let $Y$ denote a square matrix of size 10 with random values. Print the following:\n",
        "* Determinant\n",
        "* Rank of the matrix\n",
        "* Diagonal Elements\n",
        "* Trace\n",
        "* Eigen values\n",
        "* Matrices obtained after Singular Value Decomposition\n",
        "* Inverse if exists, otherwise Pseudo-Inverse\n",
        "* Multiplication $Y$ with $X$\n",
        "* Element-wise multiplication of $Y$ and its inverse(or pseudo-inverse)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Tswbn9hgL7yi",
        "colab_type": "code",
        "outputId": "a630b9bc-eb3e-4a38-8563-a7f8448f8d35",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "np.random.seed(3)\n",
        "Y = np.random.rand(10,10)\n",
        "# print(Y.shape)\n",
        "det = np.linalg.det(Y)\n",
        "print(\"Determinant:\",det)\n",
        "print(\"Rank:\",np.linalg.matrix_rank(Y))\n",
        "diag = [Y[i][i] for i in range(len(Y[0]))]\n",
        "print(\"Diagonal:\",diag)\n",
        "trace = np.trace(Y)\n",
        "print(\"Trace\",trace)\n",
        "eigen = np.linalg.eig(Y)\n",
        "print(\"Eigen values\",eigen[0])\n",
        "\n",
        "print( \"Singular Value Decomposition\")\n",
        "SVD = np.linalg.svd(Y)\n",
        "print(SVD[0])\n",
        "print(SVD[1])\n",
        "print(SVD[2])\n",
        "try:\n",
        "  Y_inv =  np.linalg.inv(Y)\n",
        "except:\n",
        "  Y_inv =np.linalg.pinv(Y)\n",
        "print(\"Inverse:\",Y_inv)\n",
        "print(\"Multiplication:\",Y.dot(X))\n",
        "print(\"ElementWise\",np.multiply(Y, Y_inv ) )\n",
        "\n",
        "# eigen = np.linalg.eig(Y)\n",
        "# # print(len(eigen))\n",
        "# print(eigen[0])\n",
        "# svd = np.linalg.svd(Y)\n",
        "\n",
        "# try:\n",
        "#   Y_inv =  np.linalg.inv(Y)\n",
        "# except:\n",
        "#   Y_inv =np.linalg.pinv(Y)\n",
        "\n",
        "\n",
        "# pseudo = np.multiply(Y, Y_inv )\n",
        "# print(dot)\n",
        "# print(pseudo)"
      ],
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Determinant: -0.012807808169095483\n",
            "Rank: 10\n",
            "Diagonal: [0.5507979025745755, 0.4568332243947111, 0.4404537176707395, 0.8457508712931793, 0.45768639932297794, 0.3621762123878334, 0.061528930829939266, 0.19897602629707833, 0.9267256842537278, 0.19638057670013687]\n",
            "Trace 4.497309545724899\n",
            "Eigen values [ 4.797525  +0.j          0.72411408+0.52238181j  0.72411408-0.52238181j\n",
            " -0.48250062+0.55413671j -0.48250062-0.55413671j -0.6909002 +0.j\n",
            " -0.25905659+0.32357377j -0.25905659-0.32357377j  0.2127855 +0.08352477j\n",
            "  0.2127855 -0.08352477j]\n",
            "Singular Value Decomposition\n",
            "[[-0.31776408 -0.02455508 -0.60644878 -0.17883359 -0.12672161  0.14873878\n",
            "  -0.17823942 -0.52859453 -0.02295855 -0.38570883]\n",
            " [-0.26118514 -0.10864541 -0.24911354  0.26547359  0.52168399 -0.25773901\n",
            "  -0.46995326  0.21752636 -0.39285046  0.16234491]\n",
            " [-0.31347907 -0.34483471 -0.25292297  0.1214296   0.1486964   0.33436315\n",
            "   0.54080229  0.48017168  0.05660692 -0.20966421]\n",
            " [-0.35815379  0.59490017  0.30255161  0.15850614 -0.11046295  0.3051409\n",
            "   0.07395537  0.03044889 -0.50561658 -0.18384856]\n",
            " [-0.28385845 -0.18085696 -0.1583078   0.10535533 -0.46807835 -0.08377643\n",
            "   0.24075452 -0.16170764 -0.24786952  0.69201648]\n",
            " [-0.28871348 -0.27577124  0.40271105  0.60433658  0.11931679 -0.04899205\n",
            "   0.02593316 -0.44875145  0.27874747 -0.12964796]\n",
            " [-0.27897316  0.00398904  0.20819753 -0.52536617  0.41116881 -0.41991923\n",
            "   0.42687225 -0.24145621 -0.12958507 -0.00984813]\n",
            " [-0.24788529  0.48136836 -0.15792433 -0.02303902  0.3246308   0.25755952\n",
            "  -0.01429533 -0.03088365  0.56052488  0.44079262]\n",
            " [-0.37505167 -0.36728578  0.39799373 -0.45186801 -0.10830044  0.34456765\n",
            "  -0.4447402   0.14147957  0.0716725   0.09192695]\n",
            " [-0.40049601  0.19846099 -0.02705464  0.02500837 -0.39745062 -0.57941613\n",
            "  -0.10288216  0.3673956   0.33321483 -0.22039139]]\n",
            "[4.89636645 1.42832104 1.17173389 0.94068764 0.76892251 0.62457278\n",
            " 0.52105948 0.28969576 0.24512275 0.09350223]\n",
            "[[-0.28816735 -0.35560525 -0.33294235 -0.33250662 -0.36658188 -0.3625847\n",
            "  -0.26573249 -0.23278667 -0.30457183 -0.29270444]\n",
            " [ 0.53693497  0.11306854  0.39562078  0.25099719 -0.07369559 -0.37753546\n",
            "  -0.08584363  0.00333609 -0.2399022  -0.51623983]\n",
            " [-0.084609   -0.22589744 -0.00306935  0.1954239  -0.327784   -0.49318928\n",
            "   0.42323124  0.18588504  0.58200169  0.02301787]\n",
            " [ 0.01388163 -0.2631197   0.42190391 -0.53612946  0.01058633 -0.04415909\n",
            "   0.29385139  0.49501812 -0.32731018  0.15669071]\n",
            " [-0.27340804  0.28220631  0.28945859 -0.1626885   0.14790418 -0.35915036\n",
            "  -0.64971879  0.23854611  0.29589227  0.1337842 ]\n",
            " [ 0.10830593  0.27974551 -0.20571161  0.10308827  0.10096026 -0.5325142\n",
            "   0.15994871 -0.16150892 -0.3941055   0.59692177]\n",
            " [ 0.44882085  0.34972045 -0.01773924 -0.50737391 -0.52251393  0.11970007\n",
            "  -0.02807841 -0.20137782  0.25705553  0.15409283]\n",
            " [-0.35599817 -0.05022624  0.63427946  0.20935183 -0.34847081  0.11510691\n",
            "   0.03182222 -0.47748403 -0.1161671   0.21777064]\n",
            " [ 0.18417681 -0.32168889  0.15954963 -0.32397524  0.5548368  -0.1807982\n",
            "   0.08626619 -0.55063636  0.28439362 -0.01119242]\n",
            " [-0.41560913  0.59522266  0.02089304 -0.23979844  0.13515565 -0.0893732\n",
            "   0.44674689 -0.10709455 -0.02239562 -0.42098815]]\n",
            "Inverse: [[ 2.31470983 -1.92264991  0.7642126   0.78096977 -2.74248585  1.20175092\n",
            "   0.38693174 -1.37664514 -0.96484143  0.83123246]\n",
            " [-2.24504111  1.25605742 -0.91466223 -0.39587642  4.71823627 -1.32162185\n",
            "   0.52594984  2.39368168  0.33051878 -2.33540101]\n",
            " [-1.41290916  0.66149939  0.94968095 -0.18869248 -0.50069581 -0.55664939\n",
            "  -0.55275157  0.57384943 -0.04209635  1.11025544]\n",
            " [ 0.88051129  0.37055438  0.15632501  1.25248223 -1.81219563 -0.7249179\n",
            "  -0.19613524 -1.81766381  0.56943994  0.52226388]\n",
            " [ 0.39743656 -0.28842728 -1.09880632 -1.57965965  0.36480771  0.90235521\n",
            "  -0.47743451  2.09911148  0.53638288 -0.04562024]\n",
            " [ 0.36068175  0.22958502  0.33426258  0.10367281 -0.06700744 -0.37158555\n",
            "   0.22972702 -1.26286862 -0.45133033  0.75430018]\n",
            " [-2.01045364  0.19347423 -1.01393804 -0.74303568  3.56449935 -0.31892146\n",
            "  -0.67116163  2.01265699  0.72873355 -0.69454601]\n",
            " [ 1.18043988  0.86047396 -0.88991494  1.30425635 -0.14247318  0.69661973\n",
            "   0.5413572  -1.69774697 -0.60797727 -1.00698216]\n",
            " [-0.1679456  -0.63197036 -0.0540802  -0.73587818 -0.46423184  0.67805628\n",
            "   0.88551393  0.37662528 -0.03416891  0.42341327]\n",
            " [ 1.3938872  -0.74982353  1.96636643  1.00676681 -3.21953806  0.44078124\n",
            "  -0.40298654 -1.90114336 -0.04414834  0.55576763]]\n",
            "Multiplication: [[2.95726101 2.04939653 3.09073485 3.22311637 1.78554985]\n",
            " [2.61266989 1.75663954 2.48635951 2.79783984 1.50654432]\n",
            " [2.98361778 2.02894044 2.82637865 2.88685728 1.69799548]\n",
            " [2.98565892 2.85485651 3.58995669 4.0073463  2.2697569 ]\n",
            " [2.49815821 1.97791033 2.77809758 2.71690515 1.59098767]\n",
            " [2.72146909 2.39905911 2.58780909 2.78212857 1.71792628]\n",
            " [2.22935358 1.74438251 2.94718357 2.48955906 2.05838199]\n",
            " [2.30476788 1.92350098 2.41698824 2.81379687 1.38016019]\n",
            " [2.91925254 2.36604123 3.53647969 3.30424184 2.52990887]\n",
            " [3.39559098 2.84629279 4.05845051 4.01068273 2.35816262]]\n",
            "ElementWise [[ 1.27493732 -1.36152035  0.22231307  0.39894092 -2.44889439  1.07712104\n",
            "   0.04859294 -0.2852999  -0.04965769  0.36641545]\n",
            " [-0.06707332  0.57380876 -0.59374754 -0.11024655  3.19073041 -0.78089721\n",
            "   0.01261327  1.33771879  0.0856878  -0.96942775]\n",
            " [-0.40059519  0.45851031  0.4182905  -0.02959976 -0.27270348 -0.43436174\n",
            "  -0.16934292  0.12737041 -0.01633217  1.03962504]\n",
            " [ 0.85937499  0.24915472  0.14113555  1.05928794 -0.68499915 -0.06684976\n",
            "  -0.12815691 -1.01396696  0.20588942  0.11753784]\n",
            " [ 0.16156588 -0.13525516 -0.29583776 -0.46093327  0.16696753  0.77650726\n",
            "  -0.27989737  0.59507263  0.14910237 -0.02073997]\n",
            " [ 0.07408776  0.04623354  0.17182269  0.00904331 -0.03240383 -0.13457945\n",
            "   0.16257474 -0.94304237 -0.3119112   0.51984891]\n",
            " [-0.75110573  0.12926687 -0.34458549 -0.42560628  1.1613394  -0.14196631\n",
            "  -0.04129586  0.48842239  0.70803941 -0.16015134]\n",
            " [ 0.81624763  0.5597184  -0.64424426  0.61963734 -0.08500859  0.04665222\n",
            "   0.03928204 -0.33781095 -0.09232803 -0.10080329]\n",
            " [-0.02171434 -0.34965513 -0.01015706 -0.70063053 -0.31642589  0.36684179\n",
            "   0.62621827  0.09938639 -0.03166521  0.35532547]\n",
            " [ 1.01240745 -0.36009522  1.65588343  0.74979192 -2.12594439  0.40286315\n",
            "  -0.25535869 -0.69570551 -0.02440717  0.10914197]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sB9Neg3gb9Qp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "9c5846d1-a79f-446d-fe9e-d0fc7b36fa67"
      },
      "source": [
        "Y= np.array([[1, 0, 0],[0,1,0],[0,0,1]])\n",
        "X = [[1,2,3],[1,2,3],[1,2,3]]\n",
        "SVD = np.linalg.svd(Y)\n",
        "print(SVD[0])"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1. 0. 0.]\n",
            " [0. 1. 0.]\n",
            " [0. 0. 1.]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qne3RnfOL6-4",
        "colab_type": "text"
      },
      "source": [
        "## End of Part - 1\n",
        " --- --- ---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LA-m4UYkMPTe",
        "colab_type": "text"
      },
      "source": [
        "## Part - 2\n",
        "---\n",
        "In this part, you will be working with the library ```pandas```. Import this library with an alias name ```pd```."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i8z7TpnZSIms",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Initial imports\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2v-HkHnyuQ3X",
        "colab_type": "text"
      },
      "source": [
        "Download dataset from: http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.csv\n",
        "Read the data and display the first 5 rows"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LinX5ywNTUIm",
        "colab_type": "code",
        "outputId": "c48e6d44-aa74-438a-a314-fd5814079d94",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        }
      },
      "source": [
        "#Download dataset from: http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.csv\n",
        "\n",
        "file_url = \"http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.csv\"\n",
        "\n",
        "df = pd.read_csv(file_url)\n",
        "print(df.head(5))"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "   pclass  survived  ...   body                        home.dest\n",
            "0       1         1  ...    NaN                     St Louis, MO\n",
            "1       1         1  ...    NaN  Montreal, PQ / Chesterville, ON\n",
            "2       1         0  ...    NaN  Montreal, PQ / Chesterville, ON\n",
            "3       1         0  ...  135.0  Montreal, PQ / Chesterville, ON\n",
            "4       1         0  ...    NaN  Montreal, PQ / Chesterville, ON\n",
            "\n",
            "[5 rows x 14 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vTk1-mF5WYFN",
        "colab_type": "text"
      },
      "source": [
        "### Preprocessing of the Dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kx9UrI9WWt17",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "**1. Convert the categorical values of columns 'sex', 'embarked', 'pclass' into dummy values and add them into titanic_data_new DataFrame**\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AwDh9njbZ0QU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "features = ['sex', 'embarked', 'pclass']\n",
        "for feature in features:\n",
        "  voc = df[feature].unique()  \n",
        "  mapping = {}\n",
        "  # itr = 0\n",
        "  # print(df[feature])\n",
        "  for i in range(len(voc)):\n",
        "    mapping [voc[i]] = i\n",
        "  df[feature] = [mapping[i] for i in df[feature]]\n",
        "  # print(df[feature])\n",
        "titanic_data_new = df[features]\n",
        "# print(titanic_data_new)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z9bxOfzDbY-n",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "**2. Fill the missing data in Age and Fare columns with the mean value of the respected column then add these columns to titanic_data_new**\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DNx7Pr0ehhAs",
        "colab_type": "code",
        "outputId": "14d727c6-2b70-449d-9c71-d68c24c3eb8c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "\n",
        "df['age'].fillna((df['age'].mean()), inplace=True)\n",
        "df['fare'].fillna((df['fare'].mean()), inplace=True)\n",
        "titanic_data_new['age'] =df['age']\n",
        "titanic_data_new['fare'] =df['fare']\n",
        "# print(titanic_data_new)\n",
        "# print(titanic_data_new.shape)\n",
        "# print(titanic_data_new['fare'].mean())\n",
        "# print(titanic_data_new['age'].mean())"
      ],
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SlRzKfhxkd1M",
        "colab_type": "text"
      },
      "source": [
        "###Normalization\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "1. Normalize the columns which have numerical data\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y3hpu92TlM38",
        "colab_type": "code",
        "outputId": "e928fd15-2611-4e43-8a07-0ed58d3a967b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "titanic_data_new['age']=(titanic_data_new['age']-titanic_data_new['age'].mean())/titanic_data_new['age'].std()\n",
        "titanic_data_new['fare']=(titanic_data_new['fare']-titanic_data_new['fare'].mean())/titanic_data_new['fare'].std()\n",
        "# print(titanic_data_new['fare'].mean())\n",
        "# print(titanic_data_new['age'].mean())"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wB9-5x83mFAO",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "\n",
        "---\n",
        "2. Drop the original age, fare columns\n",
        "3. Append the normalized columns to the titanic_data_new DataFrame.\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kb00kM0onQJy",
        "colab_type": "code",
        "outputId": "3a248344-eaf8-4d94-a79f-90ec2422877a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# titanic_data_new =titanic_data_new[[ 'sex', 'embarked', 'pclass' ]]\n",
        "print(df.shape[0])"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1309\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uLxN3PozntKe",
        "colab_type": "text"
      },
      "source": [
        "###Plotting\n",
        "1. plot the age against the ID(continuous)\n",
        "2. plot the fare against the ID(scatter)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LdSfNEKYn_RO",
        "colab_type": "code",
        "outputId": "d3fc3352-a557-4135-cddf-1fb9c1807c10",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "# print(df)\n",
        "plt.plot(titanic_data_new['age'])\n"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f14c37be438>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pucJR68zpqSu",
        "colab_type": "code",
        "outputId": "b8e93b38-31db-4034-d6c6-6227acf2c1f6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "plt.scatter([i for i in range(df.shape[0]) ],titanic_data_new['fare'])"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f14c39ed7f0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWoAAAD4CAYAAADFAawfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAgAElEQVR4nO3df3Ac5XkH8O9zp5N9VgiyE0FBWNh4GDNJHCyiqU3dyQApKDFpohDAOLhN0jbMNDNt+FFlrMYTSEpqpwbidKaThPyaTiGOE3BVJtCYNIbpDAUlciQQvxwwYJuDBAcjwtgKOp/e/rG7x95qf7x7t6t79/T9zHgs7e3tPrc6Pdp73+d9X1FKgYiIzJVrdgBERBSOiZqIyHBM1EREhmOiJiIyHBM1EZHh2tI46Dvf+U61bNmyNA5NRNSS9u3b9zulVJffY6kk6mXLlmF0dDSNQxMRtSQRORj0GJs+iIgMx0RNRGQ4JmoiIsMxURMRGY6JmojIcKlUfaRty/AEdo4cRkUp5EWwcc1S3Dywak7OPTxWwvY9+/HS5BRO7yxisH8lBnq7W+Z8RGSezCXqLcMTuOORQ9XvK0pVv087WQ+PlTC0ewJT5QoAoDQ5haHdEwCQSvKc6/MRkZky1/Sxc+RwrO1J2r5nfzVpOqbKFWzfs78lzkdEZspcoq4EzJ8dtD1JL01OxdqetfMRkZkyl6jzIrG2J+n0zmKs7Vk7HxGZKXOJeuOapbG2J2mwfyWKhXzNtmIhj8H+lS1xPiIyU+Y6E50Ow2ZUfTgdeHNVhTHX5yMiM0kaayb29fUpTspERKRPRPYppfr8Hstc0wcR0XzDRE1EZDgmaiIiwzFRExEZjomaiMhwTNRERIZjoiYiMhwTNRGR4ZioiYgMx0RNRGQ4JmoiIsMxURMRGY6JmojIcEzURESGY6ImIjIcEzURkeGYqImIDKeVqEXkOhF5QkQeF5GdIrIw7cCIiMgSmahFpBvA3wPoU0q9B0AewFVpB0ZERBbdpo82AEURaQOwCMBL6YVERERukYlaKVUCcAuAQwBeBvC6Uup+734ico2IjIrI6JEjR5KPlIhontJp+lgM4KMAlgM4HUCHiGzy7qeUul0p1aeU6uvq6ko+UiKieUqn6ePPADyvlDqilCoD2A3gT9INi4iIHDqJ+hCAtSKySEQEwAcAPJVuWERE5NBpox4BcBeAXwGYsJ9ze8pxERGRrU1nJ6XUjQBuTDkWIiLywZGJRESGY6ImIjIcEzURkeGYqImIDMdETURkOCZqIiLDMVETERmOiZqIyHBM1EREhmOiJiIyHBM1EZHhmKiJiAzHRE1EZDgmaiIiwzFRExEZjomaiMhwTNRERIZjoiYiMhwTNRGR4ZioiYgMx0RNRGQ4JmoiIsMxURMRGY6JmojIcEzURESGY6ImIjIcEzURkeGYqImIDMdETURkOCZqIiLDMVETERlOK1GLSKeI3CUiT4vIUyJyftqBERGRpU1zv68D+KlS6nIRaQewKMWYiIjIJTJRi8jJAN4P4FMAoJSaBjCdblhEROTQafpYDuAIgO+LyJiIfEdEOrw7icg1IjIqIqNHjhxJPFAiovlKJ1G3ATgPwDeUUr0AjgHY7N1JKXW7UqpPKdXX1dWVcJhERPOXTqJ+EcCLSqkR+/u7YCVuIiKaA5GJWin1GwCHRWSlvekDAJ5MNSoiIqrSrfr4OwB32hUfzwH4dHohERGRm1aiVkqNA+hLORYiIvLBkYlERIZjoiYiMhwTNRGR4ZioiYgMx0RNRGQ4JmoiIsMxURMRGY6JmojIcEzURESGY6ImIjIcEzURkeGYqImIDMdETURkOCZqIiLDMVETERmOiZqIyHBM1EREhmOiJiIyHBM1EZHhmKiJiAzHRE1EZDgmaiIiw7U1O4C5dvFtD+KZV47VbNu0tgc3D6xqUkREROEyk6iHx0rYvmc/XpqcwumdRQz2r8RAb3fkY25+SRoA7njkEADMSbL2xtCWE9xyxbm+8RIRARlJ1MNjJQztnsBUuQIAKE1OYWj3RPXxoMe8yc8vSTt2jhxOPVH7/aE4MaNw3a5xALPjJSICMtJGvX3P/moidkyVK9i+Z3/oY3FUlGo4zihBfygUEDteIpo/MnFH/dLkVKztUY/5yYvE2j9pceMlovkjE3fUp3cWA7eHPeZ19ikdgefYuGZpfcElJOh1EBEZe0e9ZXgCO0cOo6IUBEA+J6jMvNU8USzkMdi/EkBtG7X3MW9H46knteO3b0zXnGuuqj7OPqXDt/lDgGq8REReRibqLcMT1UoMwGrDrcwodLTncXy64lvZ4Vf14dcJWSzksWPD6qZ03P3s+gtY9UFEsYlKoROtr69PjY6O1v38FUP3+Xbu5UVwYOt67eOs27YXJZ+23+7OIh7afFHd8RERJU1E9iml+vwe026jFpG8iIyJyE+SC81fUAVG3MqMejohiYhME6cz8XMAnkorELegCoy4lRlxOhqJiEyllahF5AwAlwL4TrrhWIIqMOJWZgz2r0SxkK/Z5u5oJCLKAt3OxB0APg/gpKAdROQaANcAQE9PT0NBORUYTtVHXgQb1yyNXZnhdNDpDC8nIjJVZGeiiHwYwHql1GdF5AIA/6CU+nDYcxrtTCQimm/COhN17qjXAfiIiKwHsBDA20XkDqXUpiSDdHjrpxeFlOTFoTtxUxqaeW4iyr7INmql1JBS6gyl1DIAVwHYm2aSvuORQ9XqDgXg2HQFCm9NtjQ8Vop9XKeeujQ51fCxsnRuImoNRg0h3zlyOPTxeiZbAsIndUpb3HNvGZ7AiqH7sGzzvVgxdB+2DE/47kdE80eskYlKqQcBPJhKJNCrk/YbwFLvc+o5Vlxxarm9IzIrSs3pXNlEZCaj7qh16qTrmeUuqbrsesSp5Q76RBH1SYOIWptRiVqnTrqeeaOTGulYjzi13M2Mk4jMZcykTMNjJTzw9JHI/brrGFXY3VkMnPNDtyLD2a80OYW8CCpKobNYgAgwebwc+NyB3m6MHjxaUxP+8fd1+57DOa7fdqtT8jFMlWcAADkBPrGGaz0SzQdG3FG7KyMchZygkK9tmqh3VGHQXe2F53RpVWR443OS6eRUGa8dL0c+9+59pepzKkrh7n0l36qPoE8Ua89ajOt3jVeTNADMKGutR3Y2ErU+IxK1X2VEeUaho70N3Z1FCKy7362Xraqr/nigtxtbL1s161gPPH1EqyLDLz4/us8Nqvq4eWAVNq3tqbad50WwaW0PXnh1CjOz9raw/Zqo9RnR9BFUGfH6VBnjN16SyDkGemc3NziLykbFE2e2Pd3nBm2/eWDVrOaM5ZvvDTwf26+JWp8Rd9TNmuVO97xx4tB9biPHdGv2Wo9ElD4jEnWzZrnTPa/ffn50nxv3tQ32rwz8QTV7rUciSp8RTR/NmuVO97zu/eqp+mj0tTn7suqDaH4ycikuIqL5JpGluIiIqDmYqImIDMdETURkOCZqIiLDMVETERmOiZqIyHBM1EREhmOiJiIyHBM1EZHhmKiJiAxnxFwfUXRXYWllV3/7YTx04Gj1+3UrluDOz5zfxIiIaK4Yf0ftXl0lbCWVVuZN0gDw0IGjuPrbDzcpIiKaS8Yn6jgrpLQqb5KO2k5ErcX4RB13hRQiolZjfKJu1uovRESmMKYz0dsOu6Ath69+/L0Y7F+Jod0TNc0fQSukuDsdT9aY1N9ty/AEdo4cRkUp5EWwcc3SVCflj9NBum7FEt9mjnUrlqQWHxGZw4g7ar/OsjdPzOD6H1mLz/qtIO5Nat5Ox8mpMl47XtbqgNwyPIE7HjlUXSi2ohTueOQQtgxPJP1SfWONiu/Oz5w/Kymz6oNo/jBihZdlIatsd3cW8dDmiyKPsW7bXpQi2q2DjrVi6D7f1bzzIjiwdb3vsRopGYyKdS7u6InILGErvBjT9BFEt9NQZ7+gffySdNh2547YaY5x7ogBaCXrqFidO3oATNZEZEbTRxjdTkOd/YL2yYvE2t5oyaDua9o5clhrPyJqbUYk6qBOsZzAt9PQz2D/ShQL+cDHgzogAWDjmqWxtjdaMhgVqyPojp6I5pfIRC0iS0XkARF5UkSeEJHPJR2EX2fZgrYcbrtydcyh4rWJraM9H9oB6bh5YBU2re2p3kHnRbBpbU9gs0OjJYMDvd01HaRBgu7oiWh+0WmjPgHgBqXUr0TkJAD7RORnSqknkwwkqILB22l34TldeODpIzWdeAAw+ONHUZ6pTdTTlRl8bcPsZD88VsJN9zyByakyAGDxogJu/PN3a7cHxykZ9HsNTsejE5df1Qvw1h29t+xw+kQFx8szNbHPt7lPiOaTyEStlHoZwMv212+IyFMAugEkmqj9+HXaOZ1szvdDuyewsJCblaQBoFxR2L5nf00SGx4rzUrqrx0vY/CuRwHodQY6++hUfUR1PA6PlfBwyFBw7/OdPy71xk5E2ROrPE9ElgH4XwDvUUr93vPYNQCuAYCenp73HTx4sOHgdEruogiA57ddqnVM3VLAOILO55wrLJ68CP7o5IVa1yCN2Ilo7oSV52l3JorI2wDcDeBab5IGAKXU7UqpPqVUX1dXV/3RuiQxn4e33TjsmGnMHxLV8Rh2zopSiZYnElE2aSVqESnAStJ3KqV2pxvSW3Q75zqLBRRyszveCnmZ1W4cdsw05g+J6ngMO2deJNHyRCLKJp2qDwHwXQBPKaVuSz+kt+iUsRULedz0kXdj+xXnorNYqG5fvKiA7ZefO6vddrB/pXZST4Lfa3B3PA72rwz8IWxcs1TrGqQVOxGZQafqYx2AvwAwISLj9rZ/VErdl15YFr9OO6fqw2m3nSpXcO0uKyyd+S+cY/pVfaTRGRfV8ej8P7T7MUzZlRw5AT6xprY8kFUfRPOXEXN9xDU8VqomZy9OVkREWZTpuT78hA3VbuaqJ1YpXfidMRFRXJlM1PVWOKS5SO7wWAnX7xrHjGvbjELdkyttGZ7AnY8cqo617GjP4ysfCx5dSUSty4i5PuKqp8Ih7UVyt+/ZX5Ok3e545BBWDN2nPb+1Mz+2u1Hq2HQFN/z40Xm1qC8RWTKZqMMqHLxzhgyPlbD6S/fj2l3jiSySOzxWwrpte7F8871Yt21vNXHqTl2qk6yDZs2rzKh5tagvEVkymagHeruxY8NqFDzRezsSneHi3mHXbnGaUcLuypOcujRs1jwObCGafzLZRg2gZlKjINv37PedA8QtTjNK2DzUg/0rZ7VR+9GZujQvErgfB7YQzT+ZvKPWFXX3GTbjXZzjvTQ5hYHebty2YXXotKWA3tSlQfNg53Mc2EI0H7V0oo4anh02R3Wc4znbB3q78bUNq0NHEgYlYTdnfmx3Su9oz+PWK2aPtCSi1pfJAS+6/KY0Bawh137Dy922DE9g58hhVJSqLjbbd+YS33movQnfO9+1g4NxiChIpge8+CVM3ZrkeoeLO+VxDqdi445HDmFRIYfFiwqYPF6uqcUOmvzf7RcvvIbhsRLviokoFqPvqL0J0xG2TFa953H/MZhRCmFXxXtHrpOkHZw3moj8ZPaOOqiUbefI4ZpE3ciIQ7+75yjOyjGAVQkSZ3GD0uQUlm++N/GRkUTUuoxO1EFJ073db6mra3eNVydtygtQ8Rym25Ukdeqa/Tg11N5yPR3uGmwAGD14tO7mHSJqfUY2fTh3yGFLVB3Yuh4A8O4v/hTHpuMny0JOUMhLdbrQuMJqneMoFnLVSZzCcDpTotYW1vRhVKIOqpbw6mjP4/h0BQs1k1wr4Yx8RK0pE23U3iaMIPmcVO+gTU/SAoR2StajkRn5iCibjEnUfsOzvUSsiYmyQHcF8ZxYyTeuH4wcqitR1zNntl9VSzc7Q4nmjDGJWmeyoRRaaVITNEDGa0Fbfc039ST3eubMDio9dHeGMllTswWV8p59Sgd+dv0Fcx9QwowZQp6lyYaiZ+sA+s5cgpvueSLyU8JUeWbOfghhc2YHVb+E1YfXM00sUdKCkjQAPPPKMVx824NzG1AKjEnUOqttLyrkZu2Tg/XxHdCb8MhRyAkWeedJ1bB4UQFXr+0JjbWzWIicXtVtxn5O1Ot3K9YRe9inFr8KFp1FCtKadjVo3m8ir6gS22deOTZHkaTHmEQ90NuNrZeFt7n+82XvxdbLVqG7swiB1U56/oolEK17XCuRO8/bfsW5ePKfPoQXtl1qz20dfozuziJ2bFiNsS9egpsHVmHrZavQWSzM2q9YyGOqXImcXtXr9anyrNe2aW1PYFxT5Rn0fvn+WAksapIqt7AFhHWPWa+0V+Oh1pJEmazpjGmjBqxkHVQ/3VksVNtCnf/jjiq89crZEzGFfWwCgod8O/Nhe0dFLntHsa4FdhWAa3eNY/GiAr62YXU1TqcJxe/u/LXjZQze9Wg1nihhc2Z7Z/XTadKIO02srrB5v9keTl5JjWkwmVF11IB/mZ7fDHUAsGLovtg/oO7OIi48pwsPPH0k1tDvqBGDUYN04vCb3W/dtr2Bx44zf4hu1cfyzfeGlhamWfURdG4B8Py2SxM7j87UA2ksiBz3mGnEELR4MoDUFoBOS9TNVlY6FDNRR+1w3hTeNwtgJSv3tnr+ipYmp0J/qEGcGfSA2uoI7xs+CeWKwrW7xjF68Gj1XGFtwXHaiXVWxgGsJo2wPzppTiwVdO4km1n8ph7wVrHo7JPGeRvZX4dfYjs2XcF1u8bRlheU7TkXslLZ4/yOtHLVh5F31M6daRoDRpL09gV5/P7N+MPX48qLYGEhFzhUPo0Z+cLaqNOeVzvOp6p6BX1CcV9LnX3SOG8j++uI+0mUMz7OjczcUXsn+jc5SQOYkyQNWHfzx6Yrvn+4Cvl0ludyEuLgj8fhLvOei8UPgj5VJXlXF7asWpx90jhvI9t1xP0kygWVm8+oRH3TPU/ErpaYbzqLhViLIDRCt5kki+fWaV5Jowkm6JgCYNnme2u2nX1KRyoxxO18y9IYh1ZlTHkeAO264/lKARi/8RK8sO1SvLDtUox98RKj2w5N5le3761i0dknifMC8K3EeeaVYzhRqSQeQ9C6nQLrE1qS56JkGHVH3UpErLvf144n98cnzoCeueQdZr6gLYevfvy9Rv8R0WleSaMJxu+YYZ22v31jGjs2rE40BqfzrVWqPuYDozoTe798f6KJzU9Hex7tbbnUzwNYox/DmnIEqKmZdi8J5idoCbKLb3vQd/SV88uX5i9a0FwgOQFuu3I1f8k1eJs8vF5IsCTRVH7vo6D+kDTKFU2QqfmoB+96tFoeFJfAak9zDz75vwNHZ3fA5QQQ1H2eNHjrtIMW9fVu72jPhXZq5nOCW684tzo4J+5Cv1GikoxTp9135hKtX65W/SUMM98Tddiao95kPRcVQc3ScKIWkQ8C+DqAPIDvKKW2he2fRHme84t64TlduHtfSWvJK787zqDyps5iAW/84URdA2aSGNQSZNPa2qS2sJDDmydm6potz+EMTnFX1Hh5B77orv4elWQc+ZzUTFHr98vVyr+EblZ1U201TZBWqQMOE+cPVZLliqbdFDSUqEUkD+DXAC4G8CKAXwLYqJR6Mug5aS/F5ZUXwdqzFuOFV6dqEnzc0YemaGb9+Ka1PQD8Bw84fwh1V+KJ4v3lavSXUGc1+KRXsI9Ldw4VYH4kaSBeok5q1KqJNwWN1lH/MYBnlVLP2Qf7IYCPAghM1I3QXenFLZ+rnY6z3tGHpmhmg0zYTGQ7Rw6j78wluG7XeCIxeutzo2qGvSPqBMDVduLVSdJA81fHiZpDhYNLgg2PlQLfd1ElhH5zsXuZPJ+MTqLuBuD+7X0RwBrvTiJyDYBrAKCnp6euYIbHSrjhR4/Gbo6YNqitOevCrn1FKe27QR0Kek0np3cWfTtMFd5KvHEmwto5crhpiTpq8MhcDy7xXte2nOCWK2ZPXpamdSuWhLZRA9GfRMJKCON8ijF1cE9i5XlKqdsB3A5YTR9xn+/cSbf6LFgUTz4nkTMSRs1H7JX0e0y3PR+InkNF584wqF017BOH83jUvDQnZmbPM+PwfmpxOvrivP6g13H2KR2z/hC/fUEeDx04qvXH/Lpd49i+Z79vO3OcxS281z9o8qq5vuvWaaM+H8BNSql++/shAFBKbQ16Tj1t1GGzwxGlIYk24LCZ27yJEtC7u1u3YgmWd71tVvLzW9rNaVcdPXg0MI6wfocg3tLRoKalU09qx2/fmPY9Z9hMk1HNm0HHjVIs5PHx93Xj7n0vxl7izttGHfSzdVdSJanRzsQ2WJ2JHwBQgtWZ+Aml1BNBz6knUUdNq0mUhkaTtc4ER96kFafqQ0d3ZxG/ef0PgXE4A6XqqXBy2st1q3vc5zywdb3vYybelPlN2xv1s92xIdlxAkmU560HsANWed73lFJfCdu/Fe6oO9rzgbPVUWvz3tG6LSrkUK7MxEqyTtLyKz1NotM7zSohp9a+0b6JsGvaTHEHnXkVcpj1Xqh34rJMDHipp9ojDmdFq6B65I72PI5PV2ra/ZKMyfQpWym7ou6oG1VwzVHdSrwdp1ELEMRRT7LOxDSn7jkQSpNT1Rm+OosFHHuzHHgHkxMr+XZXB8fMbpty7gr8jh+2Uok3prDzB/HOoRA1z7ZzJ++OL8s14ZS+C8/pwshzr6a2iGu5onzvHJthQZs1AKwRTpOOs9pRkpVMjnqW4wtjzB016TGtiYiI/MUd+h92R23UNKdxDI+VsG7bXizffC/Wbds7b1aoNrXOk4hqXf3thxM7ViYTtdN2XJqcgsJba7vNh2TNSdyJsiHJ5g9j2qgB/UlStu/ZP6uDb6pcwQ0/ehTX7RrXnmAl6Hx+vfMPPH0k1uQt7vlKdNrDdQ32r0ylTY2IzGVMoo6z2nLQx3+n11tn9eSg840ePFozW5933pB6jh0nrigDvd2hgxuIqPUY0/QRdJfsN/xT5+N/0HOjzrdz5HBkOV49x9Z9ro6bB1Zhx4bV6CwWarYvXlTAjg2r0R2jeSRs1Zh217JMzrHjHH9RIYdCne8wM9eyIdLnzFOSBGPuqOOstjzYv1Krvjms4y3qrjxKPcfWfVxH2OKv18VoGgl6vQLg11/xH1nmnLeeKSfjPocjVqkezR63UO+glyDGJOo4qy17153LBayqHHbnHXQ+3RWa6zm2znOTEHV+t6DXqxNjPStkx31O0P6NTgdq2qTxjQgr2dS5TklOxh/Efb1PLhZwbPpEzSCaZs8F7TYX1yMuY5o+4q74PNDbjYc2X4Tnt12KW688N/ZKzUHn27hmqe8q0Y0eW/e5SfA7fyEnvitM+71e3RjrWaU77nPSWAkcqH3/PLT5IiMSRL0G+1day8t5FPKS2s8xLvf1Hr/xEmy//Fx0dxYhsBKgKUkamJvrEZcxd9SNrPhcz3PDnuNd3y9u1UfQKMskqj50BL023dfbrOue1DnmG+da1LseZjOucVjTXbOZ+J7jyEQiIgO05MhEIqL5gomaiMhwTNRERIZjoiYiMhwTNRGR4VKp+hCRIwAO1vn0dwL4XYLhzJWsxg1kN/asxg1kN/asxg2YH/uZSqkuvwdSSdSNEJHRoBIVk2U1biC7sWc1biC7sWc1biDbsbPpg4jIcEzURESGMzFR397sAOqU1biB7Mae1biB7Mae1biBDMduXBs1ERHVMvGOmoiIXJioiYgMZ0yiFpEPish+EXlWRDY3Ox4vEVkqIg+IyJMi8oSIfM7evkREfiYiz9j/L7a3i4j8q/16HhOR85ocf15ExkTkJ/b3y0VkxI5vl4i029sX2N8/az++rMlxd4rIXSLytIg8JSLnZ+Gai8h19vvkcRHZKSILTb3mIvI9EXlFRB53bYt9jUXkk/b+z4jIJ5sY+3b7/fKYiPyniHS6HhuyY98vIv2u7UbnHyilmv4PQB7AAQBnAWgH8CiAdzU7Lk+MpwE4z/76JAC/BvAuAP8CYLO9fTOAr9pfrwfw37BWBVoLYKTJ8V8P4AcAfmJ//yMAV9lffxPA39pffxbAN+2vrwKwq8lx/zuAv7G/bgfQafo1B9AN4HkARde1/pSp1xzA+wGcB+Bx17ZY1xjAEgDP2f8vtr9e3KTYLwHQZn/9VVfs77JzywIAy+2ck89E/ml2APYFPB/AHtf3QwCGmh1XRMz/BeBiAPsBnGZvOw3AfvvrbwHY6Nq/ul8TYj0DwM8BXATgJ/Yv2e9cb+bq9QewB8D59tdt9n7SpLhPthOeeLYbfc3tRH3YTlpt9jXvN/maA1jmSXaxrjGAjQC+5dpes99cxu557GMA7rS/rskrznXPQv4xpenDeWM7XrS3Gcn+aNoLYATAqUqpl+2HfgPgVPtrk17TDgCfBzBjf/8OAJNKqRP29+7YqnHbj79u798MywEcAfB9u9nmOyLSAcOvuVKqBOAWAIcAvAzrGu5DNq65I+41NuLa+/grWJ8AgOzFXmVKos4MEXkbgLsBXKuU+r37MWX9OTaq3lFEPgzgFaXUvmbHUoc2WB9rv6GU6gVwDNbH8CpDr/liAB+F9YfmdAAdAD7Y1KAaYOI11iEiXwBwAsCdzY6lUaYk6hKApa7vz7C3GUVECrCS9J1Kqd325t+KyGn246cBeMXebsprWgfgIyLyAoAfwmr++DqAThFx1sx0x1aN2378ZACvzmXALi8CeFEpNWJ/fxesxG36Nf8zAM8rpY4opcoAdsP6OWThmjviXmNTrj0AQEQ+BeDDAK62/9AAGYndjymJ+pcAzrZ7xdthdajc0+SYaoiIAPgugKeUUre5HroHgNPD/UlYbdfO9r+0e8nXAnjd9VFyziilhpRSZyillsG6rnuVUlcDeADA5QFxO6/ncnv/ptxNKaV+A+CwiDjLP38AwJMw/JrDavJYKyKL7PeNE7fx19wl7jXeA+ASEVlsf6K4xN4250Tkg7Ca+j6ilDrueugeAFfZVTbLAZwN4BfIQP5peiO5qwF/PaxKigMAvtDseHzi+1NYH/8eAzBu/1sPqy3x5wCeAfA/AJbY+wuAf7NfzwSAPgNewwV4q+rjLFhv0mcB/BjAAnv7Qvv7Z+3Hz2pyzKsBjNrXfRhWRYHx1xzAlwA8DeBxAP8Bq9LAyGsOYCestlNWmH0AAABdSURBVPQyrE8xf13PNYbVHvys/e/TTYz9WVhtzs7v6Tdd+3/Bjn0/gA+5thudfziEnIjIcKY0fRARUQAmaiIiwzFRExEZjomaiMhwTNRERIZjoiYiMhwTNRGR4f4fXZd+cj6yOBsAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LQr7y6eevTvy",
        "colab_type": "text"
      },
      "source": [
        "## End of Part - 2\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TWhZcKvfvW2B",
        "colab_type": "text"
      },
      "source": [
        "## Part - 3\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8bY4H9DszQ2S",
        "colab_type": "text"
      },
      "source": [
        "In this part, you will work with the library ```matplotlib```. Import the ```pyplot``` from ```matplotlib``` with an alias name ```plt```."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hPN6qctRzknT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import math"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fQ6KX_Aezlub",
        "colab_type": "text"
      },
      "source": [
        "Plot the sine function with domain in $[-3\\pi,3\\pi]$. Label the axes appropriately. Add title $\\sin(x)$. Use latex formatting while adding the title. Set the plot size to (10,10)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0tA3J5mA1cQ0",
        "colab_type": "code",
        "outputId": "a9c69979-68b6-4438-9d34-a693da4d092d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 640
        }
      },
      "source": [
        "X_axis= np.arange(-3*math.pi,3*math.pi, 0.1)\n",
        "# pi = \n",
        "Y_axis   = np.sin(X_axis)\n",
        "plt.figure(figsize=(10,10))\n",
        "plt.plot(X_axis, Y_axis )\n",
        "plt.ylabel('Y Amplitude')\n",
        "plt.title(r'$sin(x)$')\n",
        "plt.xlabel('X') "
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'X')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 82
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6KV7RqMm1d8P",
        "colab_type": "text"
      },
      "source": [
        "Plot $\\sin(x)$ and its spectrum, $\\cos(x)$ and its spectrum in a single plot, in the domain $[-2\\pi,2\\pi]$. Label the plot appropriately."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-OJuY0HO12Oo",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 594
        },
        "outputId": "c95d95f6-1610-46e6-f8ca-630f4f4bd806"
      },
      "source": [
        "sampling_t =  0.0001\n",
        "X_axis= np.arange(-2*math.pi,2*math.pi,sampling_t)\n",
        "# pi = \n",
        "Y_axis   = np.sin(X_axis)\n",
        "fig,a =  plt.subplots(2,1)\n",
        "# print(a)\n",
        "\n",
        "a[0].plot(X_axis, Y_axis)\n",
        "a[0].set_title(r'$sin(x)$')\n",
        "a[1].magnitude_spectrum(Y_axis,Fs = 1/sampling_t)\n",
        "a[1].set_title('Magnitude Spectrum')\n",
        "\n",
        "\n",
        "X_axis_cos= np.arange(-2*math.pi,2*math.pi, sampling_t)\n",
        "# pi = \n",
        "Y_axis_cos   = np.cos(X_axis_cos)\n",
        "figC,aC =  plt.subplots(2,1)\n",
        "# print(a)\n",
        "aC[0].plot(X_axis_cos, Y_axis_cos)\n",
        "aC[0].set_title(r'$cos(x)$')\n",
        "aC[1].magnitude_spectrum(Y_axis,Fs = 1/sampling_t)\n",
        "aC[1].set_title('Magnitude Spectrum')\n",
        "# plt.figure()\n",
        "# plt.magnitude_spectrum(Y_axis)\n",
        "# plt.figure()\n",
        "# plt.plot(X_axis, Y_axis )\n",
        "# plt.ylabel('Y Amplitude')\n",
        "# plt.title(r'$sin(x)$')\n",
        "\n",
        "# plt.figure()\n",
        "# X_axis_cos= np.arange(-3*math.pi,3*math.pi, 0.1)\n",
        "# # pi = \n",
        "# Y_axis_cos   = np.cos(X_axis)\n",
        "# plt.figure()\n",
        "# plt.plot(X_axis_cos,Y_axis_cos )\n",
        "# plt.ylabel('Y Amplitude')\n",
        "# plt.title(r'$cos(x)$')\n",
        "# plt.xlabel('X') \n",
        "# plt.figure()\n",
        "# plt.magnitude_spectrum(Y_axis_cos)\n",
        "\n"
      ],
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Magnitude Spectrum')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 83
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1S6ZRm6B18ZF",
        "colab_type": "text"
      },
      "source": [
        "## End of Part - 3\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MUucpzXBl096",
        "colab_type": "text"
      },
      "source": [
        "Create a Github repository with the name ***SHALA2020*** and save this assignment there."
      ]
    }
  ]
}